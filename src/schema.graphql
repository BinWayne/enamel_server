scalar Date
scalar JSON

type Query {
  getUser(id: String): User
  getUsers: [User]
  getTeam: Team
  getGroup: Group
  getGroups: [Group]
  getFolders(parent: String): [Folder]
  getFolder(id: String!): Folder
  getTasks(folder: String, parent: String): [Task]
  getTask(id: String!): Task
  getComments(parent: String): [Comment]
}

type Mutation {
  captureEmail(email: String!): User
  invite(emails: [String], groups: [String], role: String): [User]
  decline(id: String!): Boolean
  signup(id: String!, firstname: String!, lastname: String!, password: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createFolder(parent: String, name: String!, shareWith: [ShareInput]): Folder
  createProject(parent: String, name: String!, owners: [String],
                startDate: Date, finishDate: Date, shareWith: [ShareInput]): Folder
  updateFolder(id: String!, input: FolderInput): Folder
  deleteFolder(id: String!): Boolean
  createTask(folder: String, parent: String, name: String!): Task
  updateTask(id: String!, input: TaskInput): Task
  deleteTask(id: String!): Boolean
  createComment(body: String, parent: ShareInput): Comment
  createGroup(name: String, initials: String, avatarColor: String, users: [String]): Group
  addUsersToGroup(id: String!, users: [String]): Group
  removeUsersFromGroup(id: String!, users: [String]): Group
  updateGroup(id: String!, name: String, initials: String, avatarColor: String): Group
  deleteGroup(id: String!): Boolean
}

type User {
  id: String
  name: String
  firstname: String
  lastname: String
  email: String
  avatarColor: String
  jobTitle: String
  team: String
  role: String
  status: String
  createdAt: Date
}

type Folder {
  id: String
  name: String
  parent: String
  description: String
  shareWith: [JSON]
}

type Project {
  id: String
  name: String
  parent: String
  description: String
  shareWith: [JSON]
  owners: [User]
  startDate: Date
  finishDate: Date
  status: String
}

type Task {
  id: String
  folders: [Folder]
  assignees: [User]
  shareWith: [JSON]
  name: String
  description: String
  parent: User
  creator: User
  startDate: Date
  finishDate: Date
  importance: String
  status: String
  createdAt: Date
}

type Comment {
  id: String
  body: String
  kind: String
  user: User
  parent: JSON
  createdAt: Date
}

type Team {
  id: String
  name: String
}

type Group {
  id: String
  team: String
  name: String
  initials: String
  avatarColor: String
  users: [String]
}

type Record {
  id: String
  user: [User]
  task: [Task]
  date: Date
  timeSpent: Float
}

type AuthPayload {
  token: String!
  user: User!
}

input ShareInput {
  kind: String
  item: String
}

input TaskInput {
  name: String
  description: String
  parent: String
  creator: String
  assignees: [String]
  startDate: Date
  finishDate: Date
  importance: String
  status: String
}

input FolderInput {
  name: String
  parent: String
  description: String
  shareWith: [ShareInput]
}